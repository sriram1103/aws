Amazon EC2 provides the following features:
• Virtual computing environments, known as instances
• Preconfigured templates for your instances, known as Amazon Machine Images (AMIs), that package
the bits you need for your server (including the operating system and additional software)
• Various configurations of CPU, memory, storage, and networking capacity for your instances, known as
instance types
• Secure login information for your instances using key pairs (AWS stores the public key, and you store
the private key in a secure place)
• Storage volumes for temporary data that's deleted when you stop or terminate your instance, known
as instance store volumes
• Persistent storage volumes for your data using Amazon Elastic Block Store (Amazon EBS), known as
Amazon EBS volumes
• Multiple physical locations for your resources, such as instances and Amazon EBS volumes, known as
regions and Availability Zones
• A firewall that enables you to specify the protocols, ports, and source IP ranges that can reach your
instances using security groups
• Static IPv4 addresses for dynamic cloud computing, known as Elastic IP addresses
• Metadata, known as tags, that you can create and assign to your Amazon EC2 resources
• Virtual networks you can create that are logically isolated from the rest of the AWS cloud, and that you
can optionally connect to your own network, known as virtual private clouds (VPCs)

An Amazon Machine Image (AMI) is a template that contains a software configuration (for example, an
operating system, an application server, and applications). From an AMI, you launch an instance, which is
a copy of the AMI running as a virtual server in the cloud. You can launch multiple instances of an AMI

When an instance is stopped, the instance performs a normal shutdown, and then transitions to a
stopped state. All of its Amazon EBS volumes remain attached, and you can start the instance again at a
later time

When an instance is in a stopped state, you can attach or detach Amazon EBS volumes. You can also
create an AMI from the instance, and you can change the kernel, RAM disk, and instance type

When an instance is terminated, the instance performs a normal shutdown. The root device volume is
deleted by default, but any attached Amazon EBS volumes are preserved by default, determined by each
volume's deleteOnTermination attribute setting. The instance itself is also deleted, and you can't
start the instance again at a later time.

To prevent accidental termination, you can disable instance termination
disableApiTermination
instanceInitiatedShutdownBehavior

Each region is a separate geographic area. Each region has multiple, isolated locations
known as Availability Zones

Each Amazon EC2 region is designed to be completely isolated from the other Amazon EC2 regions. This
achieves the greatest possible fault tolerance and stability.

When you launch an instance, you must select an AMI that's in the same region. If the AMI is in
another region, you can copy the AMI to the region you're using.

When you launch an instance, you can select an Availability Zone or let us choose one for you. If you
distribute your instances across multiple Availability Zones and one instance fails, you can design your
application so that an instance in another Availability Zone can handle requests.

To coordinate Availability Zones across accounts, you must use the AZ ID, which is a unique and
consistent identifier for an Availability Zone. For example, use1-az1 is an AZ ID for the us-east-1
Region and it has the same location in every AWS account.

aws ec2 describe-regions
aws ec2 describe-availability-zones --region region-name

You can choose between AMIs backed by Amazon EC2 instance store and AMIs backed by Amazon EBS.
We recommend that you use AMIs backed by Amazon EBS, because they launch faster and use persistent
storage

Instance Store-backed Instances

  Instances that use instance stores for the root device automatically have one or more instance store
  volumes available, with one volume serving as the root device volume. When an instance is launched, the
  image that is used to boot the instance is copied to the root volume.
  
  Any data on the instance store volumes persists as long as the instance is running,
  
  instance store-backed instances do not support the Stop action
  
  After an instance store-backed instance fails or terminates, it cannot be restored
  
Amazon EBS-backed Instances
  Instances that use Amazon EBS for the root device automatically have an Amazon EBS volume attached.
  When you launch an Amazon EBS-backed instance, we create an Amazon EBS volume for each Amazon
  EBS snapshot referenced by the AMI you use
  
  An Amazon EBS-backed instance can be stopped and later restarted without affecting data stored in the
  attached volumes. There are various instance– and volume-related tasks you can do when an Amazon
  EBS-backed instance is in a stopped state. For example, you can modify the properties of the instance,
  change its size, or update the kernel it is using, or you can attach your root volume to a different running
  instance for debugging or any other purpose
  
  If an Amazon EBS-backed instance fails, you can restore your session by following one of these methods:
  
  • Stop and then start again (try this method first).
  • Automatically snapshot all relevant volumes and create a new AMI. For more information, see Creating
  an Amazon EBS-Backed Linux AMI (p. 104).
  • Attach the volume to the new instance by following these steps:
  1. Create a snapshot of the root volume.
  2. Register a new AMI using the snapshot.
  3. Launch a new instance from the new AMI.
  4. Detach the remaining Amazon EBS volumes from the old instance.
  5. Reattach the Amazon EBS volumes to the new instance.

  By default, the root device volume for an AMI backed by Amazon EBS is deleted when the instance
  terminates. To change the default behavior, set the DeleteOnTermination attribute to false using a
  block device mapping.
  
  aws ec2 run-instances --block-device-mappings file://mapping.json other parameters...  # to modify during instance launch
  aws ec2 modify-instance-attribute --instance-id i-1234567890abcdef0 --block-device-mappings file://mapping.json #modify running instance
  
Security groups act as a firewall for associated instances, controlling both inbound and outbound traffic
at the instance level

Best Practices for Amazon EC2

  Security and Network

      Manage access to AWS resources and APIs using identity federation, IAM users, and IAM roles. Establish credential management policies and procedures for creating, distributing, rotating, and revoking AWS access credentials. For more information, see IAM Best Practices in the IAM User Guide.

      Implement the least permissive rules for your security group. For more information, see Security Group Rules.

      Regularly patch, update, and secure the operating system and applications on your instance. For more information about updating Amazon Linux 2 or the Amazon Linux AMI, see Managing Software on Your Linux Instance. For more information about updating your Windows instance, see Updating Your Windows Instance in the Amazon EC2 User Guide for Windows Instances.

   Storage

      Understand the implications of the root device type for data persistence, backup, and recovery. For more information, see Storage for the Root Device.

      Use separate Amazon EBS volumes for the operating system versus your data. Ensure that the volume with your data persists after instance termination. For more information, see Preserving Amazon EBS Volumes on Instance Termination.

      Use the instance store available for your instance to store temporary data. Remember that the data stored in instance store is deleted when you stop or terminate your instance. If you use instance store for database storage, ensure that you have a cluster with a replication factor that ensures fault tolerance.

  Resource Management

      Use instance metadata and custom resource tags to track and identify your AWS resources. For more information, see Instance Metadata and User Data and Tagging Your Amazon EC2 Resources.

      View your current limits for Amazon EC2. Plan to request any limit increases in advance of the time that you'll need them. For more information, see Amazon EC2 Service Limits.

  Backup and Recovery

      Regularly back up your EBS volumes using Amazon EBS snapshots, and create an Amazon Machine Image (AMI) from your instance to save the configuration as a template for launching future instances.

      Deploy critical components of your application across multiple Availability Zones, and replicate your data appropriately.

      Design your applications to handle dynamic IP addressing when your instance restarts. For more information, see Amazon EC2 Instance IP Addressing.

      Monitor and respond to events. For more information, see Monitoring Amazon EC2.

      Ensure that you are prepared to handle failover. For a basic solution, you can manually attach a network interface or Elastic IP address to a replacement instance. For more information, see Elastic Network Interfaces. For an automated solution, you can use Amazon EC2 Auto Scaling. For more information, see the Amazon EC2 Auto Scaling User Guide.

      Regularly test the process of recovering your instances and Amazon EBS volumes if they fail.
      
      
Linux AMI Virtualization Types
  Linux Amazon Machine Images use one of two types of virtualization: 
    paravirtual (PV) or 
    hardware virtual machine (HVM). 
 The main differences between PV and HVM AMIs are the way in which they boot and whether 
  they can take advantage of special hardware extensions (CPU, network, and storage) for better performance.
  
  HVM AMIs

    HVM AMIs are presented with a fully virtualized set of hardware and boot by executing,
    the master boot record of the root block device of your image. 
    
    This virtualization type provides the ability to run an operating system directly 
     on top of a virtual machine without any modification, as if it were run on the bare-metal hardware. 
     
    The Amazon EC2 host system emulates some or all of the underlying hardware that is presented to the guest.

    Unlike PV guests, HVM guests can take advantage of hardware extensions that provide 
      fast access to the underlying hardware on the host system  
      
  PV AMIs

    PV AMIs boot with a special boot loader called PV-GRUB, 
        which starts the boot cycle and then chain loads the kernel specified in the menu.lst file on your image. 
    Paravirtual guests can run on host hardware that does not have explicit support for virtualization, 
     but they cannot take advantage of special hardware extensions such as enhanced networking or GPU processing. 
     
    The following previous generation instance types support PV AMIs:
     C1, C3, HS1, M1, M3, M2, and T1. 
    
    Current generation instance types do not support PV AMIs.
  
  PV on HMI:
  
  Creating an Amazon EBS-Backed Linux AMI:

    * Start from EBS Backed Amazon Image instance
    * Modify the instance as required
    * Stop the instance
    * Create the IMage, AWS automatically registers
  
    During AMI-creation process, Amazon EC2 creates snapshots of your instance's root volume and any other EBS volumes attached to your instance. 
    You're charged for the snapshots until you deregister the AMI and delete the snapshots.

  Creating an Instance Store-Backed Linux AMI
  
    * Start from instance stored Backed Amazon Image instance
    * Modify the instance as required
    * Stop the instance
    * Create the Image
    * Bundle is created with image.manifest.xml and image.part.xx
    * upload the template to S3 and register it

Instance Types:

 * General Purpose
 * Compute Optimized
 * Memory Optimized
 * Accelerated Computing
 * Storage Optimized
 * Instance Features
 
Instance Lifecycle:
 * Pending - for the first time started
 * Started 
 * Stopping
 * Stopped
 * reboot
 * shuttind-down
 * terminated
 
 Only started instance is billed, stopped instance is billed if it is hibernated.
 
 * Start and stop - stop is shutting down,To modify an instance attribute it should be stopped.
 * Hibernate
 * Reboot
 * Retire - An instance is scheduled to be retired when AWS detects irreparable failure of the underlying hardware hosting the instance
 * Recover - 
 * Terminate - delete your instance when you no longer need it.
 
 When you hibernate a running instance, the following happens:

    When you initiate hibernation, the instance moves to the stopping state. We signal the operating system to perform hibernation (suspend-to-disk), which freezes all the processes, saves the contents of the RAM to the Amazon EBS root volume, and then performs a regular shutdown.
    After the shutdown is complete, the instance moves to the stopped state.
    Any Amazon EBS volumes remain attached to the instance, and their data persists, including the saved contents of the RAM.
    In most cases, the instance is migrated to a new underlying host computer when it's restarted, which is the same as what happens when you stop and restart an instance.
    When you restart the instance, the instance boots up and the operating system reads in the contents of the RAM from the Amazon EBS root volume before unfreezing processes to resume its state.
    The instance retains its private IPv4 addresses and any IPv6 addresses when hibernated and restarted. We release the public IPv4 address and assign a new one when you restart it.
    The instance retains its associated Elastic IP addresses. You're charged for any Elastic IP addresses associated with a hibernated instance.
    When you hibernate a ClassicLink instance, it's unlinked from the VPC to which it was linked. You must link the instance to the VPC again after restarting it.
    
 Examples of problems that cause system status checks to fail include:
    Loss of network connectivity
    Loss of system power
    Software issues on the physical host
    Hardware issues on the physical host that impact network reachability



Configuring Instance:
 Software:
  * To update system software use screen session, ssh connection may discontinue due to ssh timeout or n/w error.
 Users:
  * ec2-user is default in most os.
  * create user using useradd, and add the key pair to aaccess
 Process state control
  * C-states control the sleep levels that a core can enter when it is idle.[C0 (shallow)-C6 (deep idle)]
  * P-states control the desired performance (in CPU frequency) from a core [P0 (high)-P15(low)]
 Time:
  * Amazon provides the Amazon Time Sync Service, which you can access from your instance (169.254.169.123).
 CPU:
  * Amazon EC2 instances support multithreading, which enables multiple threads to run concurrently on a single CPU core.
  * Each thread is represented as a virtual CPU (vCPU) on the instance. 
  * An instance has a default number of CPU cores, which varies according to instance type. 
  * For example, an m5.xlarge instance type has two CPU cores and two threads per core by default—four vCPUs in total.
  * CPU options can only be specified during instance launch and cannot be modified after launch.
  * Persist after stop
  * To disable multithreading,set cpu core to one.
 Hostname:
  * When you launch an instance, it is assigned a hostname that is a form of the private, eg ip-12-34-56-78.us-west-2.compute.internal
  * Each time you stop and restart your Amazon EC2 instance (unless you are using an Elastic IP address), 
    the public IPv4 address changes, and so does your public DNS name, system hostname, and shell prompt.
 Running Commands on Your Linux Instance at Launch
  User Data and Shell Scripts -  Add scripts to init
  User Data and the Console
    * In the Amazon EC2 console, choose the instance, Actions, Instance State, and then choose Stop.
    * Choose Actions, Instance Settings, and then choose View/Change User Data.
    * The following example is a shell script that writes "Hello World" to a file in the /tmp directory. Copy and paste into the User Data field, and then choose Save.
    
              #!/bin/bash
              /bin/echo "Hello World." >> /tmp/sdksdfjsdl
               
  User Data and cloud-init Directives
    #cloud-config
    repo_update: true
    repo_upgrade: all

    packages:
     - httpd
     - mariadb-server

    runcmd:
     - [ sh, -c, "amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2" ]
     - systemctl start httpd
  User Data and the AWS CLI
     aws ec2 run-instances --image-id ami-abcd1234 --count 1 --instance-type m3.medium \
    --key-name my-key-pair --subnet-id subnet-abcd1234 --security-group-ids sg-abcd1234 \
    --user-data file://my_script.txt

    aws ec2 run-instances --image-id ami-abcd1234 --count 1 --instance-type m3.medium \
    --key-name my-key-pair --subnet-id subnet-abcd1234 --security-group-ids sg-abcd1234 \
    --user-data echo "sromet"
 
Instance METADATA:
  Retrive:
   * using local ip address to get metadata
     - curl http://169.254.169.254/latest/meta-data/
     - curl http://169.254.169.254/latest/meta-data/ami-id

User Data:
 * http://169.254.169.254/latest/user-data
Dynaminc data:
 * http://169.254.169.254/latest/dynamic/
 
Elastic Interface:
 * Amazon Elastic Inference (EI) is a resource you can attach to your Amazon EC2 instances to accelerate your deep learning (DL) inference workloads
 * Amazon EI accelerates operations defined by TensorFlow, Apache MXNet, and the Open Neural Network Exchange (ONNX) format on low-cost, GPU-based, DL inference accelerators.

Monitoring:
    What are your goals for monitoring?
    What resources will you monitor?
    How often will you monitor these resources?
    What monitoring tools will you use?
    Who will perform the monitoring tasks?
    Who should be notified when something goes wrong?
  
   CPU utilization  - CPUUtilization
   Network utilization - NetworkIn,NetworkOut
   Disk performance - DiskReadOps,DiskWriteOps,
   Disk Reads/Writes - DiskReadBytes,DiskWriteBytes
   Memory utilization, disk swap utilization, disk space utilization, page file utilization, log collection - using cloud watch agent

Automated Monitoring Tools:
   * System Status Checks - System check, report failuers
       Loss of network connectivity
       Loss of system power
       Software issues on the physical host
       Hardware issues on the physical host that impact network reachability
   * Instance Staus check - Monitor software and nw config
      Failed system status checks
      Misconfigured networking or startup configuration
      Exhausted memory
      Corrupted file system
      Incompatible kernel
  * Amazon Cloud Watch Alarms - watch a single metric over a time period you specify, 
    and perform one or more actions based on the value of the metric relative to a given threshold over a number of time periods
  * Amazon CloudWatch Events - automate your AWS services and respond automatically to system events.
  * Amazon CloudWatch Logs - monitor, store, and access your log files from Amazon EC2 instances, AWS CloudTrail, or other sources
  * Amazon EC2 Monitoring Scripts - Perl scripts that can monitor memory, disk, and swap file usage in your instances. 
  
Manual Monitoring:
 * EC2 dashboard
 * Cloudwatch Dashboard

Monitor System Status:
 * Using system status in EC2 instance page
 * Using scheduled events
 
  Types of Scheduled Events
    Amazon EC2 supports the following types of scheduled events for your instances:
        Instance stop: The instance will be stopped. When you start it again, it's migrated to a new host computer. Applies only to instances backed by Amazon EBS.
        Instance retirement: The instance will be stopped or terminated.
        Reboot: Either the instance will be rebooted (instance reboot) or the host computer for the instance will be rebooted (system reboot).
        System maintenance: The instance might be temporarily affected by network maintenance or power maintenance.

Monitor instance Status:
 * Cloud Instance Monitoring
   Basic - 5 minute interval, by default enabled
   Detailed - 1 minute interval



Network and Security:

Key-Pair:
 * The keys that Amazon EC2 uses are 2048-bit SSH-2 RSA keys
 * public key in AWS and private key with users.
 * Amazon EC2 accepts the following formats:
    OpenSSH public key format (the format in ~/.ssh/authorized_keys)
    Base64 encoded DER format
    SSH public key file format as specified in RFC4716
 * Connect to instance if the key is lost
      * stop the instance
      * detach its root volume 
      * attach it to another instance as a data volume
      * modify the authorized_keys file 
      * move the volume back to the original instance 
      * restart the instance. 
      
Security Groups:
 * A security group acts as a virtual firewall that controls the traffic for one or more instances. 
 * One or more SG can be added to an instance
 * Add rules to allow trafic to/from instance
 * Add rules dynamically
 * Rules in all SG will be considered
 * Instance in VPC should have SG respective ti that VPC
 * SG can be changed after instance launch
 * SG are associated with n/w interfaces
 * instance SG are tied to primary nw interface (eth0/ens192)

Security Group Rules:

  *  By default, security groups allow all outbound traffic.
  *  Security group rules are always permissive; you can't create rules that deny access.
  *  Security groups are stateful — if you send a request from your instance, the response traffic for that request is allowed to flow in regardless of inbound security group rules. For VPC security groups, this also means that responses to allowed inbound traffic are allowed to flow out, regardless of outbound rules. For more information, see Connection Tracking.
  *  You can add and remove rules at any time. Your changes are automatically applied to the instances associated with the security group.
  * When you associate multiple security groups with an instance, the rules from each security group are effectively aggregated to create one set of rules. We use this set of rules to determine whether to allow access.
  
  For each rule, you specify the following:
  *  Protocol: The protocol to allow. The most common protocols are 6 (TCP) 17 (UDP), and 1 (ICMP).
  *  Port range : For TCP, UDP, or a custom protocol, the range of ports to allow. You can specify a single port number (for example, 22), or range of port numbers (for example, 7000-8000).
  *  ICMP type and code: For ICMP, the ICMP type and code.
  *  Source or destination: The source (inbound rules) or destination (outbound rules) for the traffic. Specify one of these options:
      An individual IPv4 address. You must use the /32 prefix length; for example, 203.0.113.1/32.
      An individual IPv6 address. You must use the /128 prefix length; for example 2001:db8:1234:1a00::123/128.
      A range of IPv4 addresses, in CIDR block notation, for example, 203.0.113.0/24.
      A range of IPv6 addresses, in CIDR block notation, for example, 2001:db8:1234:1a00::/64.
      The prefix list ID for the AWS service; for example, pl-1a2b3c4d. For more information, see Gateway VPC Endpoints in the Amazon VPC User Guide.
      Another security group. This allows instances associated with the specified security group to access instances associated with this security group. This does not add rules from the source security group to this security group. You can specify one of the following security groups:
      The current security group
      A different security group for the same VPC
      A different security group for a peer VPC in a VPC peering connection
   * (Optional) Description: You can add a description for the rule; for example, to help you identify it later. A description can be up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*.

 
Connection Tracking:

  * Rules are applied based on the connection state of the traffic to determine if the traffic is allowed or denied. 
    This allows security groups to be stateful — 
       responses to inbound traffic are allowed to flow out of the instance
        regardless of outbound security group rules, and vice versa.
  * For example, if you initiate an ICMP ping command to your instance from your home computer, 
    and your inbound security group rules allow ICMP traffic, 
    information about the connection (including the port information) is tracked. 

    Response traffic from the instance for the ping command is not tracked as a new request, 
    but rather as an established connection and is allowed to flow out of the instance, 
    even if your outbound security group rules restrict outbound ICMP traffic.

  * ICMP traffic is always tracked, regardless of rules.

Amazon EC2 Instance IP Addressing:
  * EC2 and VPC support both ipv4 and ipv6
  * by default ipv4
  
 Private IPv4 Addresses and Internal DNS Hostnames:
  * When instance is launched, internal ip and hostname is  provided by dhcp.
  * one private on primary interface is assigned from the subnet chosed
  * Unlike primary private IP addresses, secondary private IP addresses can be reassigned from one instance to another.
  * A private IPv4 address remains associated with the network interface when the instance is stopped and restarted
    and is released when the instance is terminated.
  
 Public IPv4 Addresses and External DNS Hostnames
  * Reachable from internet
  * Assigned durinng instance launch, can be enabled/disabled during launch
  * DNS is resolved by using the hostname to the public ip outside and to private ip inside
  * The public IP address is mapped to the primary private IP address through NAT
  * When a public IP address is disassociated from your instance,
    it is released back into the public IPv4 address pool, and you cannot reuse it.
    
    * We release your instance's public IP address when it is stopped or terminated. Your stopped instance receives a new public IP address when it is restarted.
    * We release your instance's public IP address when you associate an Elastic IP address with it. 
      When you disassociate the Elastic IP address from your instance, it receives a new public IP address.
    * If the public IP address of your instance in a VPC has been released, 
      it will not receive a new one if there is more than one network interface attached to your instance.
    * If your instance's public IP address is released while it has a secondary private IP address 
      that is associated with an Elastic IP address, the instance does not receive a new public IP address.
  
Multiple IP Addresses:
  * Number of interfaces depend on instance type
  
  How Multiple IP Addresses Work
    The following list explains how multiple IP addresses work with network interfaces:

     * You can assign a secondary private IPv4 address to any network interface. The network interface can be attached to or detached from the instance.
     * You can assign multiple IPv6 addresses to a network interface that's in a subnet that has an associated IPv6 CIDR block.
     * You must choose the secondary IPv4 from the IPv4 CIDR block range of the subnet for the network interface.
     * You must choose IPv6 addresses from the IPv6 CIDR block range of the subnet for the network interface.
     * You associate security groups with network interfaces, not the individual IP addresses. Therefore, each IP address you specify in a network interface is subject to the security group of its network interface.
     * Multiple IP addresses can be assigned and unassigned to network interfaces attached to running or stopped instances.
     * Secondary private IPv4 addresses that are assigned to a network interface can be reassigned to another one if you explicitly allow it.
     * An IPv6 address cannot be reassigned to another network interface; you must first unassign the IPv6 address from the existing network interface.
     * When assigning multiple IP addresses to a network interface using the command line tools or API, the entire operation fails if one of the IP addresses can't be assigned.
     * Primary private IPv4 addresses, secondary private IPv4 addresses, Elastic IP addresses, and IPv6 addresses remain with the network interface when it is detached from an instance or attached to another instance.
     * Although you can't move the primary network interface from an instance, you can reassign the secondary private IPv4 address of the primary network interface to another network interface.
     * You can move any additional network interface from one instance to another.
      
      The following list explains how multiple IP addresses work with Elastic IP addresses (IPv4 only):
        - Each private IPv4 address can be associated with a single Elastic IP address, and vice versa.
        - When a secondary private IPv4 address is reassigned to another interface, the secondary private IPv4 address retains its association with an Elastic IP address.
        - When a secondary private IPv4 address is unassigned from an interface, an associated Elastic IP address is automatically disassociated from the secondary private IPv4 address.
  
Steps:
-  Assigning a Secondary Private IPv4 Address
-  Configuring the Operating System on Your Instance to Recognize the Secondary Private IPv4 Address
-  Associating an Elastic IP Address with the Secondary Private IPv4 Address
-  Viewing Your Secondary Private IPv4 Addresses
-  Unassigning a Secondary Private IPv4 Address



Elastic IP Addresses:

* Static ips (ipv4)
* reachable from internet
* linked to aws account

 Basics:
  - secure elastic ip from aws account
  - attach to the instance interface, public ip would be released
  - detach from interface, and attach to some other interface
  - for use in a specific region only.
  - Charged if not assigned or instance is stopped
  - one elastic ip is free
  
Elastic Network Interfaces:
A network interface can include the following attributes:

    A primary private IPv4 address from the IPv4 address range of your VPC
    One or more secondary private IPv4 addresses from the IPv4 address range of your VPC
    One Elastic IP address (IPv4) per private IPv4 address
    One public IPv4 address
    One or more IPv6 addresses
    One or more security groups
    A MAC address
    A source/destination check flag
    A description

Placement Groups:
 * which determines how instances are placed on underlying hardware
 * Cluster – clusters instances into a low-latency group in a single Availability Zone
 * Partition – spreads instances across logical partitions, ensuring that instances in one partition do not share underlying hardware with instances in other partitions
 * Spread – spreads instances across underlying hardware

Limitations:
* Cluster cannot spread across availability zones
* only certain instance types are allowed for Cluster PG
* same instance type for all instances in a cluster placement group.
* Partitioned PG can have max of 7 partition/AZ
* doesn’t guarantee an even distribution of instances across all partitions.
* Partition PG are not supported for Dedicated Hosts
* A partition placement group with Dedicated Instances can have a maximum of two partitions.
* A spread placement group supports a maximum of seven running instances per Availability Zone. 
* Spread placement groups are not supported for Dedicated Instances or Dedicated Hosts.

Storage:
    Amazon Elastic Block Store - durable, block-level storage, used for DB.
    Amazon EC2 Instance Store - Direct storage, used for OS
    Amazon Elastic File System (Amazon EFS) - Sharing
    Amazon Simple Storage Service (Amazon S3) - Backup

Amazon Elastic Block Store:
 * primary storage for data that requires frequent updates, like DB
 * volumes persist independently from the running life of an EC2 instance.
 * use it like any other physical hard drive
 *  EBS provides the following volume types: General Purpose SSD (gp2), Provisioned IOPS SSD (io1), Throughput Optimized HDD (st1), Cold HDD (sc1), and Magnetic (standard, a previous-generation type).
 
 Benefits:
 * Data Availability:
   - Created in AZ and replicaed.
   - Cab be attached to instance in the AZ.
   - only one instance can be attached to the EBS volume
 * Data persistence
   - off-instance storage that can persist independently
   - By default, EBS volumes that are created and attached to an instance at launch are deleted when that instance is terminated. 
   - You can modify this behavior by changing the value of the flag DeleteOnTermination to false when you launch the instance.
 * Data encryption
 * Snapshots
 * Flexibility

Amazon EC2 Instance Store:

* instance store provides temporary block-level storage for your instance.
* This storage is located on disks that are physically attached to the host computer.
* Instance store is ideal for temporary storage of information that changes frequently, 
  such as buffers, caches, scratch data, and other temporary content,
  or for data that is replicated across a fleet of instances, such as a load-balanced pool of web servers.
* The data in an instance store persists only during the lifetime of its associated instance  
* Data lost, if instance stops/terminate or drive fails

  
Block Device Mapping:
* A block device is a storage device that moves data in sequences of bytes or bits (blocks).

EC2Rescue for Linux
  
  
  
  


