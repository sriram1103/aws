Amazon Virtual Private Cloud (Amazon VPC) enables you to launch AWS resources into a virtual network that you've defined. 
This virtual network closely resembles a traditional network that you'd operate in your own data center, 
 with the benefits of using the scalable infrastructure of AWS.
 
Contents
    VPCs and Subnets
    Supported Platforms
    Default and Nondefault VPCs
    Accessing the Internet
    Accessing a Corporate or Home Network
    Accessing Services Through AWS PrivateLink

VPCs and Subnets
  * A virtual private cloud (VPC) is a virtual network dedicated to your AWS account. 
  * It is logically isolated from other virtual networks in the AWS
  
  * A subnet is a range of IP addresses in your VPC. 
  * You can launch AWS resources into a specified subnet. 
  * Use a public subnet for resources that must be connected to the internet,
    and a private subnet for resources that won't be connected to the internet.
    
  * To protect the AWS resources in each subnet, you can use multiple layers of security,
     including security groups and network access control lists (ACL)    
    
By launching your instances into a VPC instead of EC2-Classic, you gain the ability to:

  *  Assign static private IPv4 addresses to your instances that persist across starts and stops
  *  Optionally associate an IPv6 CIDR block to your VPC and assign IPv6 addresses to your instances
  *  Assign multiple IP addresses to your instances
  *  Define network interfaces, and attach one or more network interfaces to your instances
  *  Change security group membership for your instances while they're running
  *  Control the outbound traffic from your instances (egress filtering) in addition to controlling the inbound traffic to them (ingress filtering)
  *  Add an additional layer of access control to your instances in the form of network access control lists (ACL)
  *  Run your instances on single-tenant hardware    
    
Default and Non-Default VPC's:

 Accessing internet:
   * Your default VPC includes an internet gateway, and each default subnet is a public subnet. 
   * Each instance that you launch into a default subnet has a private IPv4 address and a public IPv4 address. 
   * These instances can communicate with the internet through the internet gateway. 
   * An internet gateway enables your instances to connect to the internet through the Amazon EC2 network edge.
    
   * By default, each instance that you launch into a nondefault subnet has a private IPv4 address, 
     but no public IPv4 address, unless you specifically assign one at launch, 
     or you modify the subnet's public IP address attribute.
   * These instances can communicate with each other, but can't access the internet.
   * You can enable internet access for an instance launched into a nondefault subnet by attaching an internet gateway to its VPC
     and associating an Elastic IP address with the instance.
   
   Accessing a Corporate or Home Network
   * You can optionally connect your VPC to your own corporate data center using an IPsec AWS Site-to-Site VPN connection,   
      making the AWS Cloud an extension of your data center.
   * A Site-to-Site VPN connection consists of a virtual private gateway attached to your VPC 
     and a customer gateway located in your data center. 
   * A virtual private gateway is the VPN concentrator on the Amazon side of the Site-to-Site VPN connection. 
   * A customer gateway is a physical device or software appliance on your side of the Site-to-Site VPN connection.
   
   
VPC Networking Components
     Network Interfaces
     Route Tables
     Internet Gateways
     Egress-Only Internet Gateways
     DHCP Options Sets
     DNS
     Elastic IP Addresses
     VPC Endpoints
     NAT
     VPC Peering
     ClassicLink
Elastic Network Interfaces
 * An elastic network interface (referred to as a network interface in this documentation) is a virtual network interface that can include the following attributes:

     - a primary private IPv4 address
     - one or more secondary private IPv4 addresses
     - one Elastic IP address per private IPv4 address
     - one public IPv4 address, which can be auto-assigned to the network interface for eth0 when you launch an instance
     - one or more IPv6 addresses
     - one or more security groups
     - a MAC address
     - a source/destination check flag
     - a description

Route Tables
 * A route table contains a set of rules, called routes, that are used to determine where network traffic is directed.
 * Each subnet in your VPC must be associated with a route table;the table controls the routing for the subnet.
 * A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.

 Contents:
   Route Table Basics
   Route Priority
   Routing Options
   Working with Route Tables
   API and Command Overview

  Route Table Basics:
     - Your VPC has an implicit router.
     - Your VPC automatically comes with a main route table that you can modify.
     - You can create additional custom route tables for your VPC.
     - Each subnet must be associated with a route table, which controls the routing for the subnet. If you don't explicitly associate a subnet with a particular route table, the subnet is implicitly associated with the main route table.
     - You cannot delete the main route table, but you can replace the main route table with a custom table that you've created (so that this table is the default table each new subnet is associated with).
     - Each route in a table specifies a destination CIDR and a target (for example, traffic destined for the external corporate network 172.16.0.0/12 is targeted for the virtual private gateway). We use the most specific route that matches the traffic to determine how to route the traffic.
     - CIDR blocks for IPv4 and IPv6 are treated separately. For example, a route with a destination CIDR of 0.0.0.0/0 (all IPv4 addresses) does not automatically include all IPv6 addresses. You must create a route with a destination CIDR of ::/0 for all IPv6 addresses.
     - Every route table contains a local route for communication within the VPC over IPv4. If your VPC has more than one IPv4 CIDR block, your route tables contain a local route for each IPv4 CIDR block. If you've associated an IPv6 CIDR block with your VPC, your route tables contain a local route for the IPv6 CIDR block. You cannot modify or delete these routes.
     - When you add an Internet gateway, an egress-only Internet gateway, a virtual private gateway, a NAT device, a peering connection, or a VPC endpoint in your VPC, you must update the route table for any subnet that uses these gateways or connections.
     - There is a limit on the number of route tables you can create per VPC, and the number of routes you can add per route table. 

  Main Route Tables - when you create a VPC, it automatically has a main route table
  Custom Route Tables
   * Your VPC can have route tables other than the default table. 
   * One way to protect your VPC is to leave the main route table in its original default state (with only the local route), 
     and explicitly associate each new subnet you create with one of the custom route tables you've created. 
   * This ensures that you explicitly control how each subnet routes outbound traffic.

  Route Priority
  * We use the most specific route in your route table that matches the traffic to determine how to route the traffic 
    (longest prefix match).
  * Routes to IPv4 and IPv6 addresses or CIDR blocks are independent of each other; 
    we use the most specific route that matches either IPv4 traffic or IPv6 traffic to determine how to route the traffic.

 Routing Options
   Route Tables for an Internet Gateway - 0.0.0.0/0	igw-11aa22bb
   Route Tables for a NAT Device -  to NAT device or NAT Gateways
   Route Tables for a Virtual Private Gateway - to connect to your corp nw
   Route Tables for a VPC Peering Connection - btwn VPC's (pcx-1a2b1a2b)
   Route Tables for ClassicLink
   Route Tables for a VPC Endpoint - enables you to create a private connection between your VPC and another AWS service
   Route Tables for an Egress-Only Internet Gateway - allow only outbound internet access
    
Internet Gateways:
  * An internet gateway is a horizontally scaled, redundant, and highly available VPC component 
    that allows communication between instances in your VPC and the internet. 
  * It therefore imposes no availability risks or bandwidth constraints on your network traffic.
  * An internet gateway serves two purposes: 
    - to provide a target in your VPC route tables for internet-routable traffic
    - to perform network address translation (NAT) for instances that have been assigned public IPv4 addresses.
  * An internet gateway supports IPv4 and IPv6 traffic.
  
  Enabling Internet Access:
    - Attach an internet gateway to your VPC.
    - Ensure that your subnet's route table points to the internet gateway.
    - Ensure that instances in your subnet have a globally unique IP address (public IPv4 address, Elastic IP address, or IPv6 address).
    - Ensure that your network access control and security group rules allow the relevant traffic to flow to and from your instance.

Egress-Only Internet Gateways:

* An egress-only Internet gateway is a horizontally scaled, redundant, and highly available VPC component 
  that allows outbound communication over IPv6 from instances in your VPC to the Internet, 
  and prevents the Internet from initiating an IPv6 connection with your instances.
  
* An egress-only Internet gateway is for use with IPv6 traffic only. 
* To enable outbound-only Internet communication over IPv4, use a NAT gateway instead. For more information


NAT:
* You can use a NAT device to enable instances in a private subnet to connect to the internet or other AWS services, 
* prevent the internet from initiating connections with the instances. 
* A NAT device forwards traffic from the instances in the private subnet to the internet or other AWS services, 
  and then sends the response back to the instances.
* When traffic goes to the internet, the source IPv4 address is replaced with the NAT device’s address and similarly, 
 when the response traffic goes to those instances, the NAT device translates the address back to those instances’ private IPv4 addresses.

  NAT Devices:
   * NAT Gateways - manager service, does not require admin
   * NAT Interface - launched from NAT AMI

  recommend NAT gateways, as they provide better availability and bandwidth over NAT instances. 
  
  NAT GATEWAY:
   * To create a NAT gateway, you must specify the public subnet in which the NAT gateway should reside. 
   * You must also specify an Elastic IP address to associate with the NAT gateway when you create it. 
   * After you've created a NAT gateway, you must update the route table associated with one or more of your private subnets to point Internet-bound traffic to the NAT gateway.
     This enables instances in your private subnets to communicate with the internet.
   * Each NAT gateway is created in a specific Availability Zone and implemented with redundancy in that zone.
   * You have a limit on the number of NAT gateways you can create in an Availability Zone.

  NAT Gateway Rules and Limitations
  - A NAT gateway supports 5 Gbps of bandwidth and automatically scales up to 45 Gbps. 
    If you require more, you can distribute the workload by splitting your resources into multiple subnets, and creating a NAT gateway in each subnet.
  - You can associate exactly one Elastic IP address with a NAT gateway. 
    You cannot disassociate an Elastic IP address from a NAT gateway after it's created. To use a different Elastic IP address for your NAT gateway, you must create a new NAT gateway with the required address, update your route tables, and then delete the existing NAT gateway if it's no longer required.
  - A NAT gateway supports the following protocols: TCP, UDP, and ICMP.
  - You cannot associate a security group with a NAT gateway. You can use security groups for your instances in the private subnets to control the traffic to and from those instances.
  - You can use a network ACL to control the traffic to and from the subnet in which the NAT gateway is located. The network ACL applies to the NAT gateway's traffic. A NAT gateway uses ports 1024–65535. For more information, see Network ACLs.
  - When a NAT gateway is created, it receives a network interface that's automatically assigned a private IP address from the IP address range of your subnet. You can view the NAT gateway's network interface in the Amazon EC2 console. For more information, see Viewing Details about a Network Interface. You cannot modify the attributes of this network interface.
  - NAT gateway cannot be accessed by a ClassicLink connection associated with your VPC.
  - NAT gateway can support up to 55,000 simultaneous connections to each unique destination. This limit also applies if you create approximately 900 connections per second to a single destination (about 55,000 connections per minute). If the destination IP address, the destination port, or the protocol (TCP/UDP/ICMP) changes, you can create an additional 55,000 connections. For more than 55,000 connections, there is an increased chance of connection errors due to port allocation errors. These errors can be monitored by viewing the ErrorPortAllocation CloudWatch metric for your NAT gateway.

DHCP Options Sets
* provides a standard for passing configuration information to hosts on a TCP/IP network. 
* The options field of a DHCP message contains the configuration parameters. 
* Some of those parameters are the domain name, domain name server, and the netbios-node-type.

  Amazon DNS Server
    * When you create a VPC, we automatically create a set of DHCP options and associate them with the VPC. 
    * This set includes two options: domain-name-servers=AmazonProvidedDNS, and domain-name=domain-name-for-your-region. 
    * AmazonProvidedDNS is an Amazon DNS server, and this option enables DNS for instances that need to communicate over the VPC's Internet gateway. 
    * The string AmazonProvidedDNS maps to a DNS server running on a reserved IP address at the base of the VPC IPv4 network range, plus two. 
      For example, the DNS Server on a 10.0.0.0/16 network is located at 10.0.0.2. 
      For VPCs with multiple IPv4 CIDR blocks, the DNS server IP address is located in the primary CIDR block.

DNS:
 DNS Hostnames
 * When you launch an instance into a default VPC, we provide the instance with public and private DNS hostnames 
 * When you launch an instance into a nondefault VPC, we provide the instance with a private DNS hostname 
   and we might provide a public DNS hostname, depending on the DNS attributes you specify for the VPC and if your instance has a public IPv4 address.

 DNS Attributes:
  * enableDnsHostnames	- Indicates whether the instances launched in the VPC get public DNS hostnames.
   If this attribute is true, instances in the VPC get public DNS hostnames, but only if the enableDnsSupport attribute is also set to true.

 * enableDnsSupport	- Indicates whether the DNS resolution is supported for the VPC.

 DNS Limit:
 * DNS Limits
  Each Amazon EC2 instance limits the number of packets to the Amazon-provided DNS server to a maximum of 1024 packets/second/network interface. 
  This limit cannot be increased.
  
VPC Endpoints:
 two types of VPC endpoints: 
 - interface endpoints - elastic network interface with a private IP address that serves as an entry point for traffic destined to a supported service
 - gateway endpoints - a gateway that is a target for a specified route in your route table, used for traffic destined to a supported AWS service
 
 
Network ACLs:
* Nw ACL is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. 
* You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC.
* Similar to Security Groups
* Security Groups control access at instane level and ACL at subnet level


Security Group	                                                          Network ACL
-----------------------------------------------------------------------------------------
Operates at the instance level                                           Operates at the subnet level
Supports allow rules only                                                Supports allow rules and deny rules
Is stateful:                                                             Is stateless
  Return traffic is automatically allowed, regardless of any rules           Return traffic must be explicitly allowed by rules
We evaluate all rules before deciding whether to allow traffic           We process rules in number order when deciding whether to allow traffic
Applies to an instance only if someone specifies the security group      Automatically applies to all instances in the subnets it's associated with (therefore, you don't have to rely on users to specify the security group)
    
    
    
