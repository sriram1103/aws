RDS:
  * a web service that makes it easier to set up, operate, and scale a relational database in the cloud. 
  * provides cost-efficient, resizable capacity for an industry-standard relational database and manages common database administration tasks.
  
Overview of Amazon RDS:
  - When you buy a server, you get CPU, memory, storage, and IOPS, all bundled together. 
    With Amazon RDS, these are split apart so that you can scale them independently. If you need more CPU, less IOPS, or more storage, you can easily allocate them.
  - Amazon RDS manages backups, software patching, automatic failure detection, and recovery.
  - To deliver a managed service experience, Amazon RDS doesn't provide shell access to DB instances, 
    and it restricts access to certain system procedures and tables that require advanced privileges.
  - You can have automated backups performed when you need them, or manually create your own backup snapshot. 
    You can use these backups to restore a database. The Amazon RDS restore process works reliably and efficiently.
  - You can get high availability with a primary instance and a synchronous secondary instance that you can fail over to when problems occur. 
    You can also use MySQL, MariaDB, or PostgreSQL Read Replicas to increase read scaling.
  - You can use the database products you are already familiar with: MySQL, MariaDB, PostgreSQL, Oracle, Microsoft SQL Server.
  - In addition to the security in your database package, you can help control who can access your RDS databases by using AWS Identity and Access Management (IAM) to define users and permissions. You can also help protect your databases by putting them in a virtual private cloud.

Amazon RDS DB Instances
  * A DB instance is an isolated database environment running in the cloud. 
  * It is the basic building block of Amazon RDS. 
  * A DB instance can contain multiple user-created databases, and can be accessed using the same client tools and applications.
  * DB instances are simple to create and modify with the Amazon AWS command line tools, Amazon RDS API actions, or the AWS Management Console.
  * You can have up to 40 Amazon RDS DB instances. 
  * Each DB instance has a DB instance identifier.
  * This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon RDS API and AWS CLI commands. 
  * The DB instance identifier must be unique for that customer in an AWS Region.
  
  * When creating a DB instance, some database engines require that a database name be specified. 
  * A DB instance can host multiple databases, or a single Oracle database with multiple schemas. 
  * The database name value depends on the database engine:
      - MySQL and MariaDB database engines, the database name is the name of a database hosted in your DB instance. 
        Databases hosted by the same DB instance must have a unique name within that instance.
      - Oracle database engine, database name is used to set the value of ORACLE_SID, 
        which must be supplied when connecting to the Oracle RDS instance.
      - Microsoft SQL Server database engine, database name is not a supported parameter.
      - PostgreSQL database engine, the database name is the name of a database hosted in your DB instance. 
        A database name is not required when creating a DB instance. 
        Databases hosted by the same DB instance must have a unique name within that instance.

  Topics:
    DB Instance Class
      - determines the computation and memory capacity of an Amazon RDS DB instance. 
      - The DB instance class you need depends on your processing power and memory requirements.
      - Types:
        * Standard DB instance classes 
        * Burstable Performance DB instance classes 
        * Memory Optimized DB instance classes
    DB Instance Status      
    Regions and Availability Zones
    DB instance storage
      * use Amazon Elastic Block Store (Amazon EBS) volumes for database and log storage. 
      * Depending on the amount of storage requested, Amazon RDS automatically stripes across multiple 
        Amazon EBS volumes to enhance performance.
      * Types:
        - General Purpose SSD - also called gp2, volumes offer cost-effective storage that is ideal for a broad range of workloads
        - Provisioned IOPS - designed to meet the needs of I/O-intensive workloads, particularly database workloads, 
          that require low I/O latency and consistent I/O throughput.
        - Magnetic - supports magnetic storage for backward compatibility.
    High Availability (Multi-AZ) for Amazon RDS
     - provides high availability and failover support for DB instances using Multi-AZ deployments
     - automatically provisions and maintains a synchronous standby replica in a different Availability Zone
     - primary DB instance is synchronously replicated across Availability Zones to a standby replica to provide data redundancy,
       eliminate I/O freezes, and minimize latency spikes during system backups
    Amazon RDS DB Instance Lifecycle
       Creating an Amazon RDS DB Instance
       Connecting to an Amazon RDS DB Instance
       Modifying an Amazon RDS DB Instance
       Maintaining a DB Instance
       Upgrading a DB Instance Engine Version
       Renaming a DB Instance
       Rebooting a DB Instance
       Stopping an Amazon RDS DB Instance Temporarily
       Starting an Amazon RDS DB Instance That Was Previously Stopped
       Deleting a DB Instance
    Tagging Amazon RDS Resources
     - add metadata to your Amazon RDS resources
    Working with Read Replicas of MariaDB, MySQL, and PostgreSQL DB Instances
     - MariaDB, MySQL, and PostgreSQL DB engines' built-in replication functionality to create a special type of DB instance 
       called a Read Replica from a source DB instance
     - Updates made to the source DB instance are asynchronously copied to the Read Replica
     - You can reduce the load on your source DB instance by routing read queries from your applications to the Read Replica. 
     - Using Read Replicas, you can elastically scale out beyond the capacity constraints of a single DB instance 
       for read-heavy database workloads.
     - 
    Working with Option Groups
     - Some DB engines offer additional features that make it easier to manage data and databases, 
       and to provide additional security for your database.
     - Amazon RDS uses option groups to enable and configure these features.
     - An option group can specify features, called options, that are available for a particular Amazon RDS DB instance.
     - Options can have settings that specify how the option works. 
     - When you associate a DB instance with an option group, the specified options and option settings are enabled for that DB instance
     - Persistent and Permanent options
       Persistent: can be removed by dissociating the DB instances from the OG
       Permanent: cannot be removed
     
    Working with DB Parameter Groups
     - manage your DB engine configuration through the use of parameters in a DB parameter group . 
     - DB parameter groups act as a container for engine configuration values that are applied to one or more DB instances.
     - default DB parameter group is created if you create a DB instance without specifying a customer-created DB parameter group
     - default DB parameter group contains database engine defaults
     - cannot modify the parameter settings of a default DB parameter group
     
    Working with Amazon Resource Names (ARNs) in Amazon RDS
     - arn:aws:rds:<region>:<account number>:<resourcetype>:<name>
     
    Working with Storage
    DB Instance Billing for Amazon RDS

Backing Up and Restoring Amazon RDS DB Instances
   Working With Backups
    - creates and saves automated backups of your DB instance
    - creates a storage volume snapshot of your DB instance, backing up the entire DB instance and not just individual databases.
    - Automated backups follow these rules:
      - DB instance must be in the ACTIVE state for automated backups to occur. 
      - Automated backups don't occur while your DB instance is in a state other than ACTIVE, for example STORAGE_FULL.
      - Automated backups and automated snapshots don't occur while a copy is executing in the same region for the same DB instance.
   Restore:
    - Restored DB instances are automatically associated with the default parameter and option groups. 
    - However, you can apply a custom parameter group and option group by specifying them during a restore.
    Limitations and Recommendations
     - The maximum number of retained automated backups in one region is 20.
     - It's not included in the DB instances limit.
     - You can have 20 running DB instances and an additional 20 retained automated backups at the same time.
     - Retained automated backups don't contain information about parameters or option groups.
     - You can restore a deleted instance to a point in time that is within the retention period at the time of delete.
     - A retained automated backup can't be modified because it consists of system backups, transaction logs, 
       and the DB instance properties that existed at the time you deleted the source instance.
       
   Creating a DB Snapshot
   Restoring from a DB Snapshot
   Copying a Snapshot
   Sharing a DB Snapshot
   Restoring a DB Instance to a Specified Time
   Deleting a Snapshot
   Tutorial: Restore a DB Instance from a DB Snapshot


















